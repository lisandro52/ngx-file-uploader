(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{si7q:function(n,e,t){"use strict";t.r(e);var o=t("An66"),l=t("i9Na"),i=t("aGB+"),a=t("1VvW"),r=t("kZht");const c=[{path:"",component:(()=>{class n{constructor(n,e){this._host=n,this._fileUploadService=e,this.markdown=t("wsGC")}ngOnInit(){}}return n.\u0275fac=function(e){return new(e||n)(r.Jb(r.l),r.Jb(i.e))},n.\u0275cmp=r.Db({type:n,selectors:[["uni-test-case2"]],decls:3,vars:1,consts:[[1,"panel","panel-default"],[1,"markdown-body"]],template:function(n,e){1&n&&(r.Mb(0,"div",0),r.Mb(1,"markdown",1),r.nc(2),r.Lb(),r.Lb()),2&n&&(r.zb(2),r.oc(e.markdown.default))},directives:[l.a],styles:['.flex[_ngcontent-%COMP%], .flex-auto[_ngcontent-%COMP%], .flex-grow[_ngcontent-%COMP%], .flex-initial[_ngcontent-%COMP%], .flex-nogrow[_ngcontent-%COMP%], .flex-none[_ngcontent-%COMP%], .flex-noshrink[_ngcontent-%COMP%], .flexbox[_ngcontent-%COMP%], [flex-auto][_ngcontent-%COMP%], [flex-grow][_ngcontent-%COMP%], [flex-initial][_ngcontent-%COMP%], [flex-nogrow][_ngcontent-%COMP%], [flex-none][_ngcontent-%COMP%], [flex-noshrink][_ngcontent-%COMP%], [flex="50"][_ngcontent-%COMP%], [flex][_ngcontent-%COMP%]{display:-webkit-box;display:-moz-flex;display:flex}.flexbox-inline[_ngcontent-%COMP%]{display:-webkit-inline-box;display:-moz-inline-flex;display:inline-flex}@-moz-document url-prefix(){.layout-fill{margin:0;width:100%;min-height:100%;height:100%}}@media screen\\0 {.flex[_ngcontent-%COMP%], .flex-auto[_ngcontent-%COMP%], .flex-grow[_ngcontent-%COMP%], .flex-initial[_ngcontent-%COMP%], .flex-nogrow[_ngcontent-%COMP%], .flex-none[_ngcontent-%COMP%], .flex-noshrink[_ngcontent-%COMP%], [flex-auto][_ngcontent-%COMP%], [flex-grow][_ngcontent-%COMP%], [flex-initial][_ngcontent-%COMP%], [flex-nogrow][_ngcontent-%COMP%], [flex-none][_ngcontent-%COMP%], [flex-noshrink][_ngcontent-%COMP%], [flex="50"][_ngcontent-%COMP%]{-webkit-box-flex:1;flex:1 1 0%}}.flex-stretch[_ngcontent-%COMP%], .layout-column[_ngcontent-%COMP%], .layout-row[_ngcontent-%COMP%], [flex-stretch][_ngcontent-%COMP%], [layout=column][_ngcontent-%COMP%], [layout=row][_ngcontent-%COMP%]{-webkit-box-pack:start;justify-content:start;align-content:stretch;-webkit-box-align:stretch;align-items:stretch}.layout-row[_ngcontent-%COMP%], [layout=row][_ngcontent-%COMP%]{-webkit-box-direction:normal;-webkit-box-orient:horizontal;-moz-flex-direction:row;flex-direction:row}.layout-column[_ngcontent-%COMP%], [layout=column][_ngcontent-%COMP%]{-webkit-box-direction:normal;-webkit-box-orient:vertical;-moz-flex-direction:column;flex-direction:column;flex-wrap:nowrap}.layout-column[_ngcontent-%COMP%] > *[_ngcontent-%COMP%], [layout=column][_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{max-width:100%}[layout-wrap][_ngcontent-%COMP%]{flex-wrap:wrap}[layout-nowrap][_ngcontent-%COMP%]{flex-wrap:nowrap}[layout-fill][_ngcontent-%COMP%]{margin:0;width:100%;min-height:100%;height:100%}.flex-grow[_ngcontent-%COMP%], [flex-grow][_ngcontent-%COMP%]{-webkit-box-flex:1;-moz-flex:1 1 100%;flex:1 1 100%}.flex-initial[_ngcontent-%COMP%], [flex-initial][_ngcontent-%COMP%]{-webkit-box-flex:0;-moz-flex:0 1 auto;flex:0 1 auto}.flex-auto[_ngcontent-%COMP%], [flex-auto][_ngcontent-%COMP%]{-webkit-box-flex:1;-moz-flex:1 1 auto;flex:1 1 auto}.flex-none[_ngcontent-%COMP%], [flex-none][_ngcontent-%COMP%]{-webkit-box-flex:0;-moz-flex:0 0 auto;flex:0 0 auto}.flex-noshrink[_ngcontent-%COMP%], [flex-noshrink][_ngcontent-%COMP%]{-webkit-box-flex:1;-moz-flex:1 0 auto;flex:1 0 auto}.flex-nogrow[_ngcontent-%COMP%], [flex-nogrow][_ngcontent-%COMP%]{-webkit-box-flex:0;-moz-flex:0 1 auto;flex:0 1 auto}[flex="50"][_ngcontent-%COMP%]{-webkit-box-flex:1;-moz-flex:1 1 50%;flex:1 1 50%}[_nghost-%COMP%]{display:block;padding:1rem}']}),n})()}];let s=(()=>{class n{}return n.\u0275mod=r.Hb({type:n}),n.\u0275inj=r.Gb({factory:function(e){return new(e||n)},imports:[[a.e.forChild(c)],a.e]}),n})();t.d(e,"TestCase2Module",(function(){return f}));let f=(()=>{class n{}return n.\u0275mod=r.Hb({type:n}),n.\u0275inj=r.Gb({factory:function(e){return new(e||n)},imports:[[o.c,l.b,s,i.i.forRoot()]]}),n})()},wsGC:function(n,e,t){"use strict";t.r(e),e.default="# Basic Setup\n\nYou can find the complete test case at GitHub. [Test Case](https://github.com/uniprank/ngx-file-uploader/tree/master/library/TestCases/src/app/modules/test-case1)\n\n## Global usage\n\nInstall via npm\n\n```shell\nnpm i @uniprank/ngx-file-uploader\n```\n\n## Interfaces\n\n> There are only two configurations which can be defined. The first one is the **TransferOptionsInterface** for the file uploader. The second one is for each file **FileManagerOptionsInterface**. With these configurations you can define a global configuration for all files with the second one you have the option to overwrite some of the configurations partialy.\n\n### File Uploader Config\n\n```typescript\nTransferOptionsInterface {\n    // Path to server where the files be uploaded\n    url?: string;\n    // File alias default is `file`\n    alias?: string;\n    // An object with header informations\n    headers?: object;\n    // A object of data to be sent along with the files\n    formData?: object;\n    // Request methode (default POST) - HTML5 only\n    method?: 'POST' | 'PUT' | 'PATCH';\n    // Activate CORS - HTML5 only\n    enableCors?: boolean;\n    // if you need credentials for the communication you can activate this option here\n    withCredentials?: boolean;\n    // A list of filters which are extend the default list (default list is empty)\n    filters?: FileFilter[];\n    // Don't allow to have the same image 2 times at the queue\n    uniqueFiles?: boolean;\n    // Remove file from queue when upload was successfull\n    removeBySuccess?: boolean;\n    // Automatically upload new files when they are adding to the queue\n    autoUpload?: boolean;\n}\n```\n\n### File Config\n\n```typescript\n// for all settings (default: use url from TransferOptionsInterface)\nFileManagerOptionsInterface {\n    // Path to server to which the file should be uploaded\n    url?: string;\n    // File alias default is `file`\n    alias?: string;\n    // An object with header informations\n    headers?: object;\n    // A list of data to be sent along with the files\n    formData?: object;\n    // Request methode (default POST) - HTML5 only\n    method?: 'POST' | 'PUT' | 'PATCH';\n    // Remove file from queue when upload was successfull\n    removeBySuccess?: boolean;\n    // Activate CORS - HTML5 only\n    enableCors?: boolean;\n    // if you need credentials for the communication you can activate this option here\n    withCredentials?: any;\n}\n```\n\n## App Root Module\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n\nimport { NgxFileUploaderModule } from '@uniprank/ngx-file-uploader';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [BrowserModule, HttpClientModule, NgxFileUploaderModule.forRoot()],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n## App Root Module with configuration for the angular service\n\n> All parameters are optional\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n\nimport { NgxFileUploaderModule, FileFilter } from '@uniprank/ngx-file-uploader';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        NgxFileUploaderModule.forRoot({\n            url: 'https://simple.rest.api.com/service/for/upload',\n            method: 'POST',\n            filters: [new FileFilter('only:JPG/PNG/GIF', new RegExp('image/jpeg|image/png|image/gif'), 'type')]\n        } as TransferOptionsInterface)\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n"}}]);